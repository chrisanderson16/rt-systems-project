/*
 * SensorController.c
 *
 *  Created on: Oct 24, 2022
 *      Author: kadh1
 */


#include <stdio.h>

#include "main.h"
#include "User/L2/Comm_Datalink.h"
#include "User/L3/AcousticSensor.h"
#include "User/L3/DepthSensor.h"
#include "User/L4/SensorPlatform.h"
#include "User/L4/SensorController.h"
#include "User/util.h"

//Required FreeRTOS header files
#include "FreeRTOS.h"
#include "Timers.h"
#include "semphr.h"

QueueHandle_t Queue_Sensor_Data;
QueueHandle_t Queue_HostPC_Data;


static void ResetMessageStruct(struct CommMessage* currentRxMessage){

	static const struct CommMessage EmptyMessage = {0};
	*currentRxMessage = EmptyMessage;
}

/******************************************************************************
This task is created from the main.
******************************************************************************/
void SensorControllerTask(void *params)
{
	char Msg[50];
	enum HostPCCommands HostPCCommand = PC_Command_NONE;
	struct CommMessage currentRxMessage = {0};
	struct SensorStates sensorState = {0};
	bool IsRemotePlatformEnabled = false;

	do {
	//Check if there is any received Sensor Data
		if(xQueueReceive(Queue_Sensor_Data, &currentRxMessage, 0) == pdPASS){

			switch(currentRxMessage.SensorID){
				case Controller:
					switch(currentRxMessage.messageId){
						case 0: //Do Nothing
							break;
						case 1: //Received Acknowledgment
							sensorState.IsAcousticAck = false;
							sensorState.IsDepthAck = false;
							break;
						case 3: //Do Nothing
							break;
					}
					break;
				case Acoustic:
					//---------------------------------------------------------------- You should complement this part
					break;
				case Depth:
					switch(currentRxMessage.messageId){
						case 0: //Do Nothing
							break;
						case 1: //Received Acknowledgment
							sensorState.IsDepthAck = true;
							break;
						case 3: //Received Depth Data
							sensorState.DepthData  = currentRxMessage.params;
							break;
					}
						break;
						default://Should not get here
					ResetMessageStruct(&currentRxMessage);
			}
		}


		if (IsRemotePlatformEnabled == true){
			if(sensorState.IsAcousticAck == true){
				sprintf(Msg,"Acoustic Data: %d mV | ",sensorState.AcousticData);
				print_str(Msg);
			}else{
				//------------------------ You should complement this part
			}
			if(sensorState.IsDepthAck == true){
				sprintf(Msg,"Depth Data: %d m\r\n",sensorState.DepthData);
				print_str(Msg);
			}else{
				sprintf(Msg,"Depth Data: NACK m\r\n");
				print_str(Msg);
			}
		}
		//Check if there is any received Host PC Command Data
		if(xQueueReceive(Queue_HostPC_Data, &HostPCCommand, 0) == pdPASS){
			switch(HostPCCommand){
				case PC_Command_START:
					print_str("Sending Start Command\r\n");
					send_sensorEnable_message(Acoustic,5000);
					send_sensorEnable_message(Depth,5000);
					IsRemotePlatformEnabled = true;
					break;
				case PC_Command_RESET:
				//-------------------------------------- complement
				default:
					break;
			}
		}
		vTaskDelay(1000 / portTICK_RATE_MS);
	} while(1);
}




/*
 * This task reads the queue of characters from the Sensor Platform when available
 * It then sends the processed data to the Sensor Controller Task
 */
void SensorPlatform_RX_Task(){
	struct CommMessage currentRxMessage = {0};
	Queue_Sensor_Data = xQueueCreate(80, sizeof(struct CommMessage));

	request_sensor_read();  // requests a usart read (through the callback)

	while(1){
		parse_sensor_message(&currentRxMessage);

		if(currentRxMessage.IsMessageReady == true && currentRxMessage.IsCheckSumValid == true){

			xQueueSendToBack(Queue_Sensor_Data, &currentRxMessage, 0);
			ResetMessageStruct(&currentRxMessage);
		}
	}
}



/*
 * This task reads the queue of characters from the Host PC when available
 * It then sends the processed data to the Sensor Controller Task
 */
void HostPC_RX_Task(){

	enum HostPCCommands HostPCCommand = PC_Command_NONE;

	Queue_HostPC_Data = xQueueCreate(80, sizeof(enum HostPCCommands));

	request_hostPC_read();

	while(1){
		HostPCCommand = parse_hostPC_message();

		if (HostPCCommand != PC_Command_NONE){
			xQueueSendToBack(Queue_HostPC_Data, &HostPCCommand, 0);
		}

	}
}
